name: PR Checks

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - labeled
      - unlabeled
      - ready_for_review

  merge_group:
    types:
      - checks_requested

jobs:
  check-if-merge-queue:
    name: "Check if Merge Queue Branch"
    runs-on: ubuntu-latest
    # run on either PR or merge-queue trigger
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}

    steps:
      - name: Detect merge-queue event
        id: merge-queue
        run: |
          if [[ "${{ github.event_name }}" == "merge_group" ]]; then
            echo "event output mq: ${{ github.event_name }}"
            echo "This is a merge-queue run"
            echo "is-merge-queue=true" >> $GITHUB_OUTPUT
          else
            echo "event output pr: ${{ github.event_name }}"
            echo "This is a normal PR run"
            echo "is-merge-queue=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      is-merge-queue: ${{ steps.merge-queue.outputs.is-merge-queue }}

  # schema-and-tests:
  #   name: "Schema and Tests"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Generate random number and test odd/even
  #       run: |
  #         num=$(( RANDOM % 100 ))
  #         echo "Number is $num"
  #         if (( num % 2 == 0 )); then
  #           echo "Even â†’ FAIL"
  #           echo "Faking passing because we know that this bit works correctly as a trigger"
  #           exit 0
  #         else
  #           echo "Odd â†’ PASS"
  #           exit 0
  #         fi

  # detect-relevant-changes:
  #   # This job is only run when:
  #   # 1) the github.event_name == 'pull_request' (and not `merge_group`)
  #   # 2) the pr-verify workflow conclusion is 'success'
  #   name: "Merge Queue and Relevant Files Checks"
  #   runs-on: ubuntu-latest
  #   needs: [schema-and-tests]
  #   if: ${{ github.event_name == 'pull_request' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref }}
  #         fetch-depth: 0
  #     - name: Detect relevant changes
  #       uses: dorny/paths-filter@v3
  #       id: relevant-changes
  #       with:
  #         base: "main"
  #         ref: ${{ github.ref }}
  #         filters: |
  #           allowed:
  #             - 'thisCanChange/**'  # Only run if files in this path are changed
  #     - name: Debug filter output here
  #       run: |
  #         echo "steps.relevant-changes.outputs.allowed = ${{ steps.relevant-changes.outputs.allowed }}"
  #         echo "show outputs: ${{ toJson(steps.relevant-changes.outputs) }}"
  #   outputs:
  #     should-run: ${{ steps.relevant-changes.outputs.allowed }}

  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   name: "Build and Deploy"
  #   needs: [detect-relevant-changes]
  #   if: ${{ needs.detect-relevant-changes.outputs.should-run == 'false' }}
  #   steps:
  #     - name: Check current minute % 3
  #       run: |
  #         minute=$(date +'%M')
  #         echo "Current minute: $minute"
  #         if (( minute % 3 != 0 )); then
  #           echo "Minute not divisible by 3 â†’ FAIL"
  #           exit 1
  #         else
  #           echo "Minute Ã· 3 â†’ PASS"
  #         fi

  # pr-valid:
  #   name: "PR Validation"
  #   runs-on: ubuntu-latest
  #   needs: [schema-and-tests, build-and-deploy]
  #   if: ${{ always() }}
  #   steps:
  #     - name: Debug job results
  #       run: |
  #         echo "schema-and-tests result: ${{ needs.schema-and-tests.result }}"
  #         echo "build-and-deploy result: ${{ needs.build-and-deploy.result }}"
  #     - name: Check required jobs
  #       run: |
  #         set -x
  #         # Fail if any mandatory jobs failed
  #         if [[ "${{ needs.schema-and-tests.result }}"       != "success" ]] || \
  #            [[ "${{ needs.build-and-deploy.result }}" != "success" ]] && [[ "${{ needs.build-and-deploy.result }}" != "skipped" ]]; then
  #           exit 1
  #         fi

  #     - name: PR Validation Complete
  #       run: |
  #         echo "All required checks passed (deploy was either skipped or successful). ðŸŽ‰"
